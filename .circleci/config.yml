version: 2.1

commands:
  restore-sbt-cache:
    description: "Restore sbt cache"
    steps:
      - restore_cache:
          key: v1-sbt-cache-{{ checksum "backend/build.sbt" }}

  save-sbt-cache:
    description: "Save sbt cache"
    steps:
      - save_cache:
          paths:
            - "~/.ivy2/cache"
            - "~/.sbt"
            - "~/.m2"
          key: v1-sbt-cache-{{ checksum "backend/build.sbt" }}

  restore-npm-cache:
    description: "Restore npm cache"
    steps:
      - restore_cache:
          key: v1-npm-cache-{{ checksum "frontend/package-lock.json" }}

  save-npm-cache:
    description: "Save npm cache"
    steps:
      - save_cache:
          paths:
            - "frontend/node_modules"
          key: v1-npm-cache-{{ checksum "frontend/package-lock.json" }}

  restore-e2e-cache:
    description: "Restore npm e2e cache"
    steps:
      - restore_cache:
          key: v2-npm-cache-{{ checksum "e2e/package-lock.json" }}

  save-e2e-cache:
    description: "Save npm e2e cache"
    steps:
      - save_cache:
          paths:
            - "e2e/node_modules"
          key: v2-npm-cache-{{ checksum "e2e/package-lock.json" }}

jobs:
  scapegoat:
    working_directory: ~/repo
    docker:
      - image: mozilla/sbt:latest
    steps:
      - checkout
      - restore-sbt-cache
      - run:
          name: Run scapegoat
          command: |
            cd backend
            sbt scapegoat
      - save-sbt-cache
      - store_artifacts:
          path: ~/repo/backend/target/scala-2.12/scapegoat-report/scapegoat.html

  unit_test_backend:
    working_directory: ~/repo
    docker:
      - image: mozilla/sbt:latest
    steps:
      - checkout
      - restore-sbt-cache
      - run:
          name: Run unit tests
          command: |
            cd backend
            sbt test
      - save-sbt-cache
      - store_test_results:
          path: ~/repo/backend/target/test-reports

  build_backend:
    working_directory: ~/repo
    docker:
      - image: mozilla/sbt:latest
    steps:
      - checkout
      - restore-sbt-cache
      - run:
          name: Build jar
          command: |
            cd backend
            sbt assembly
      - save-sbt-cache
      - run:
          name: Move docker related files
          command: |
            cd backend
            mv target/scala-2.12/*.jar docker/app.jar
      - persist_to_workspace:
          root: ~/repo/
          paths:
            - backend/docker

  deploy_staging_backend:
    machine: true
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Build and push Docker image to Heroku
          command: |
            sudo curl https://cli-assets.heroku.com/install.sh | sh
            heroku container:login
            cd ~/repo/backend/docker
            heroku container:push -a doctor-fate-staging web
            heroku container:release -a doctor-fate-staging web
            curl https://doctor-fate-staging.herokuapp.com/health

  deploy_production_backend:
    machine: true
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Build and push Docker image to Heroku
          command: |
            sudo curl https://cli-assets.heroku.com/install.sh | sh
            heroku container:login
            cd ~/repo/backend/docker
            heroku container:push -a doctor-fate web
            heroku container:release -a doctor-fate web
            curl https://doctor-fate.herokuapp.com/health

  lint:
    working_directory: ~/repo
    docker:
      - image: node:14-alpine
    steps:
      - checkout
      - restore-npm-cache
      - run:
          name: Install deps
          command: |
            cd frontend
            npm install
      - save-npm-cache
      - run:
          name: Run linter
          command: |
            cd frontend
            npm run lint

  unit_test_frontend:
    working_directory: ~/repo
    docker:
      - image: node:14-alpine
    environment:
      REACT_APP_ID_TOKEN_SECRET: secret
    steps:
      - checkout
      - restore-npm-cache
      - run:
          name: Install deps
          command: |
            cd frontend
            npm install
      - save-npm-cache
      - run:
          name: Run tests
          command: |
            cd frontend
            JEST_JUNIT_OUTPUT_DIR=~/repo/frontend/reports/junit/ npm run test:report
      - store_test_results:
          path: ~/repo/frontend/reports/junit/
      - store_artifacts:
          path: ~/repo/frontend/reports/junit
      - store_artifacts:
          path: ~/repo/frontend/coverage/lcov-report

  build_staging_frontend:
    working_directory: ~/repo
    docker:
      - image: node:14-alpine
    environment:
      REACT_APP_BACKEND: https://doctor-fate-staging.herokuapp.com/
    steps:
      - checkout
      - restore-npm-cache
      - run:
          name: Install deps
          command: |
            cd frontend
            npm install
      - save-npm-cache
      - run:
          name: Build static files
          command: |
            cd frontend
            npm run build
      - run:
          name: Move docker related files
          command: |
            cd frontend
            mv build docker/
      - persist_to_workspace:
          root: ~/repo/
          paths:
            - frontend/docker

  deploy_staging_frontend:
    machine: true
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Build and push Docker image to Heroku
          command: |
            sudo curl https://cli-assets.heroku.com/install.sh | sh
            heroku container:login
            cd ~/repo/frontend/docker
            heroku container:push -a menstra-staging web
            heroku container:release -a menstra-staging web
            curl https://menstra-staging.herokuapp.com

  e2e_test:
    working_directory: ~/repo
    docker:
      - image: cypress/included:5.2.0
    steps:
      - checkout
      - run:
          name: Run tests
          command: |
            cd e2e
            npm test
      - store_test_results:
          path: ~/repo/e2e/test-results.xml
      - store_artifacts:
          path: ~/repo/e2e/test-results.xml
      - store_artifacts:
          path: ~/repo/e2e/cypress/videos

  build_production_frontend:
    working_directory: ~/repo
    docker:
      - image: node:14-alpine
    environment:
      REACT_APP_BACKEND: https://doctor-fate.herokuapp.com/
    steps:
      - checkout
      - restore-npm-cache
      - run:
          name: Install deps
          command: |
            cd frontend
            npm install
      - save-npm-cache
      - run:
          name: Build static files
          command: |
            cd frontend
            npm run build
      - run:
          name: Move docker related files
          command: |
            cd frontend
            mv build docker/
      - persist_to_workspace:
          root: ~/repo/
          paths:
            - frontend/docker

  deploy_production_frontend:
    machine: true
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Build and push Docker image to Heroku
          command: |
            sudo curl https://cli-assets.heroku.com/install.sh | sh
            heroku container:login
            cd ~/repo/frontend/docker
            heroku container:push -a menstra web
            heroku container:release -a menstra web
            curl https://menstra.herokuapp.com

workflows:
  pipeline:
    jobs:
      - lint
      - unit_test_frontend
      - build_staging_frontend:
          requires:
            - unit_test_frontend
            - lint
      - deploy_staging_frontend:
          requires:
            - build_staging_frontend

      - scapegoat
      - unit_test_backend
      - build_backend:
          requires:
            - scapegoat
            - unit_test_backend
      - deploy_staging_backend:
          requires:
            - build_backend

      - e2e_test:
          requires:
            - deploy_staging_frontend
            - deploy_staging_backend

      - build_production_frontend:
          requires:
            - e2e_test
      - deploy_production_frontend:
          requires:
            - build_production_frontend
